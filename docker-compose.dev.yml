name: coworker-platform

services:
  frontend:
    build:
      context: .
      dockerfile: docker/frontend/Dockerfile.dev
    ports:
      - "3456:3456"
    volumes:
      - .:/app
      - frontend_node_modules:/app/node_modules
    environment:
      - VITE_API_URL=http://localhost:3457
    depends_on:
      - backend
    networks:
      - app-network
    command: npm run dev -- --host --port 3456

  backend:
    build:
      context: .
      dockerfile: docker/backend/Dockerfile.dev
    ports:
      - "3457:3457"
    volumes:
      - ./server:/app/server
      - backend_node_modules:/app/server/node_modules
      - ./shared:/app/shared
    environment:
      - PORT=3457
      - NODE_ENV=development
      - CLIENT_URL=http://localhost:3456
      - CORS_ORIGINS=http://localhost:3456
      - DATABASE_URL=mongodb://mongodb:27017/coworker-platform
      - POSTGRES_URL=postgres://postgres:postgres@postgres:5432/coworker
      - JWT_SECRET=your-super-secret-jwt-key-change-in-production
      - JWT_EXPIRES_IN=30d
      - NODE_OPTIONS=--experimental-specifier-resolution=node --es-module-specifier-resolution=node
    depends_on:
      mongodb:
        condition: service_healthy
      postgres:
        condition: service_healthy
    networks:
      - app-network
    command: npm run dev
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3457/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  mongodb:
    image: mongo:7.0
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
    networks:
      - app-network
    restart: unless-stopped
    command: ["mongod", "--bind_ip_all"]
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s

  postgres:
    image: postgres:15-alpine
    ports:
      - "5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init:/docker-entrypoint-initdb.d
    networks:
      - app-network
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=coworker
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s
    restart: unless-stopped

networks:
  app-network:
    driver: bridge

volumes:
  frontend_node_modules:
  backend_node_modules:
  mongodb_data:
  postgres_data:
