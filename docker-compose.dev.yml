name: coworker-platform

services:
  frontend:
    build:
      context: .
      dockerfile: docker/frontend/Dockerfile.dev
    ports:
      - '3456:3456'
    volumes:
      - .:/app
      - /app/node_modules
    environment:
      - VITE_API_URL=http://localhost:3457
    depends_on:
      - backend
    networks:
      - app-network

  backend:
    build:
      context: .
      dockerfile: docker/backend/Dockerfile.dev
    ports:
      - '3457:3457'
    volumes:
      - ./server:/app/server
      - /app/server/node_modules
      - ./shared:/app/shared
    environment:
      - PORT=3457
      - BACKEND_PORT=3457
      - NODE_ENV=development
      - CLIENT_URL=http://localhost:3456
      - CORS_ORIGINS=http://localhost:3456
      - DATABASE_URL=mongodb://mongodb:27017/coworker-platform
      - POSTGRES_URL=postgres://postgres:postgres@postgres:5432/coworker
      - JWT_SECRET=your-super-secret-jwt-key-change-in-production
      - JWT_EXPIRES_IN=30d
      - NODE_OPTIONS=--experimental-specifier-resolution=node --es-module-specifier-resolution=node --no-warnings
    depends_on:
      mongodb:
        condition: service_healthy
      postgres:
        condition: service_healthy
    networks:
      - app-network
    command: npx tsx watch src/server.ts
    healthcheck:
      test:
        ['CMD', 'wget', '--no-verbose', '--tries=1', '--spider', 'http://localhost:3457/api/health']
      interval: 10s
      timeout: 5s
      retries: 5

  mongodb:
    image: mongo:latest
    ports:
      - '27017:27017'
    volumes:
      - mongodb_data:/data/db
    networks:
      - app-network
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 10s
      timeout: 5s
      retries: 5

  postgres:
    image: postgres:15
    ports:
      - '5433:5432'
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=coworker
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init:/docker-entrypoint-initdb.d
    networks:
      - app-network
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U postgres']
      interval: 10s
      timeout: 5s
      retries: 5

networks:
  app-network:
    driver: bridge

volumes:
  mongodb_data:
  postgres_data:
